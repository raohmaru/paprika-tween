{
  "version": 3,
  "sources": ["../src/mixer.js", "../src/seed.js", "../src/recipe.js", "../src/spice.js", "../src/mortar.js", "../src/sweet.js"],
  "sourcesContent": ["/**\n * A Mixer is an object which can hold different [spices]{@link Spice} or [recipes]{@link Recipe} that will be animated at the same time.\n * <br><br>\n * Note that a Mixer instance does not play the animation by itself. Its method [frame()]{@linkcode Mixer#frame}\n * must be called in order to execute the interpolations of each animatable object, with methods like\n * [requestAnimationFrame()]{@link https://developer.mozilla.org/en/docs/Web/API/Window/requestAnimationFrame}\n * or an instance of the {@link Mortar} class.\n * @example\nimport { Mixer, Spice } from 'paprika-tween';\nconst spice = new Spice({\n    duration: 1000,\n    from: { x: 0, y: 42 },\n    to: { x: 200, y: 120 },\n    render: (props, interpolation) => {\n       console.log(props.x, props.y, interpolation);\n    }\n});\nconst mixer = new Mixer();\nmixer.add(spice)\n     .start();\nfunction loop(timestamp) {\n    mixer.frame(timestamp);\n    requestAnimationFrame(loop);\n}\nrequestAnimationFrame(loop);\n * @since 1.0.0\n */\nexport class Mixer {\n    /**\n     * Creates a new Mixer instance.\n     * @constructor\n     * @since 1.0.0\n     */\n    constructor() {\n        this.spices = [];\n    }\n    /**\n     * Adds one or more [spices]{@link Spice} or [recipes]{@link Recipe} (this is, animatable objects with properties to interpolate).\n     * @param {...(Spice|Recipe)} rest - Instances of Paprika animatable objects.\n     * @returns {Mixer} - The current instance of the Mixer.\n     * @since 1.0.0\n    * @example\nimport { Mixer, Spice } from 'paprika-tween';\nconst spice1 = new Spice({ ... });\nconst spice2 = new Spice({ ... });\nconst mixer = new Mixer();\nmixer.add(spice1, spice2);\n     */\n    add(...rest) {\n        for (let i = 0; i < rest.length; i++) {\n            this.spices.push(rest[i]);\n        }\n        return this;\n    }\n    /**\n     * Starts all the animations in the mixer by setting the starting time of each animatable objects at the given\n     * <code>time</code> argument.<br>\n     * If <code>time</code> is not provided, the timestamp from\n     * [performance.now()]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance/now}\n     * will be used instead.\n     * @param {(DOMHighResTimeStamp|number)} [time] - The initial number from where to start the animation.\n     * @returns {Mixer} - The current instance of the Mixer.\n     * @since 1.0.0\n    * @example\nimport { Mixer } from 'paprika-tween';\nconst mixer = new Mixer();\nmixer.start(0);\n     */\n    start(time) {\n        for (let i = 0; i < this.spices.length; i++) {\n            this.spices[i].start(time);\n        }\n        return this;\n    }\n    /**\n     * Stops all animations and clears the stack of animatable objects.\n     * @since 1.0.0\n     */\n    dispose() {\n        for (let i = this.spices.length - 1; i !== -1; i--) {\n            this.spices[i].dispose();\n        }\n        this.spices.length = 0;\n    }\n    /**\n     * Moves the interpolation of the properties of the animatable objects in the mixer by the given time, which is\n     * relative to the starting time.<br>\n     * If <code>time</code> is not provided, the timestamp from\n     * [performance.now()]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance/now}\n     * will be used instead.\n     * @param {(DOMHighResTimeStamp|number)} [time] - The amount of time to interpolate since the animations started.\n     * @since 1.0.0\n    * @example\nimport { Mixer, Spice } from 'paprika-tween';\nconst spice = new Spice({\n    duration: 10,\n    from: { width: 100 },\n    to: { width: 550 },\n    render: (props) => { ... }\n});\nconst mixer = new Mixer(0);\nmixer.add(spice)\n     .start();\nmixer.frame(1);\n     */\n    frame(time) {\n        for (let i = 0; i < this.spices.length; i++) {\n            this.spices[i].frame(time);\n        }\n    }\n}\n", "/**\n * Seed is the super class of {@link Spice} and {@link Recipe} animatable objects. It does not contain properties that can be interpolated, hence {@link Spice} or {@link Recipe} should be used instead.\n * @private\n * @since 1.0.0\n */\nexport class Seed {\n    /**\n     * Creates a new Seed instance.\n     * @since 1.0.0\n     */\n    constructor() {\n        this.elapsed = 0;\n    }\n    /**\n     * Calculates the current elapsed time of the interpolation as a float number between 0 (start) and 1 (end).\n     * @private\n     * @param {Number} time - The current time.\n     * @returns {Number} - A float number between 0 and 1.\n     */\n    elapse(time) {\n        let elapsed = (time - this._startTime) / this.duration;\n        if (elapsed < 0) {\n            elapsed = 0;\n        } else if (elapsed > 1) {\n            elapsed = 1;\n        }\n        return elapsed;\n    }\n}\n", "import { Seed } from './seed.js';\n\nconst defaults = {\n    onEnd: () => { }\n};\n\n/**\n * A Recipe object can contain any number of [spices]{@link Spice} which will be interpolated <i>sequentially</i>, this is, one each another.\n * @example\nimport { Mixer, Recipe, Spice } from 'paprika-tween';\nconst spice1 = new Spice({ ... });\nconst spice2 = new Spice({ ... });\nconst recipe = new Recipe({ onEnd: () => cancelAnimationFrame(rafID) });\nrecipe.add(spice1, spice2);\nconst mixer = new Mixer();\nmixer.add(recipe)\n     .start();\nfunction loop(timestamp) {\n    mixer.frame(timestamp);\n    rafID = requestAnimationFrame(loop);\n}\nlet rafID = requestAnimationFrame(loop);\n * @since 1.0.0\n */\nexport class Recipe extends Seed {\n    /**\n     * Creates a new Recipe instance with the given options.\n     * @param {Object} options\n     * @param {function} [options.onEnd] - Function called when the last {@link Spice} reaches the end of the interpolation.\n     * It receives the current instance as an argument.\n     * @since 1.0.0\n     */\n    constructor(options) {\n        super();\n        Object.assign(this, defaults, options);\n        this.spices = [];\n    }\n    /**\n     * Adds one or more [spices]{@link Spice}.\n     * @param {...Spice} rest - Instances of {@link Spice} objects.\n     * @returns {Recipe} - The current instance of the Recipe.\n     * @since 1.0.0\n    * @example\nimport { Recipe, Spice } from 'paprika-tween';\nconst spice1 = new Spice({ ... });\nconst spice2 = new Spice({ ... });\nnew Recipe().add(spice1, spice2);\n     */\n    add(...rest) {\n        for (let i = 0; i < rest.length; i++) {\n            this.spices.push(rest[i]);\n        }\n        return this;\n    }\n    /**\n     * Sets the starting time at the <code>time</code> argument. The first animatable object in the Recipe will start\n     * at this time.<br>\n     * If <code>time</code> is not provided, the timestamp from\n     * [performance.now()]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance/now}\n     * will be used instead.\n     * @param {(DOMHighResTimeStamp|number)} [time] - The initial number from where to start the animation.\n     * @since 1.0.0\n    * @example\nimport { Recipe } from 'paprika-tween';\nconst recipe = new Recipe();\nrecipe.start(1000);\n     */\n    start(time) {\n        let spice;\n        let duration = 0;\n        for (let i = 0; i < this.spices.length; i++) {\n            spice = this.spices[i];\n            if (!this.elapsed) {\n                spice.delay += duration;\n                duration = spice.duration + spice.delay;\n            }\n            spice.start(time);\n        }\n        this._startTime = this.spices[0]._startTime;\n        if (!this.elapsed) {\n            this.duration = duration;\n        }\n        return this;\n    }\n    /**\n     * Moves the interpolation of the properties of the active spice in the recipe by the given time, which is\n     * relative to the starting time.<br>\n     * If <code>time</code> is not provided, the timestamp from\n     * [performance.now()]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance/now}\n     * will be used instead.\n     * @param {(DOMHighResTimeStamp|number)} [time] - The amount of time to interpolate since the animations started.\n     * @since 1.0.0\n    * @example\nimport { Recipe, Spice } from 'paprika-tween';\nconst spice1 = new Spice({\n    ...,\n    duration: 1700\n});\nconst spice2 = new Spice({\n    ...,\n    duration: 2000\n});\nconst recipe = new Recipe().add(spice1, spice2)\n      .start();\nrecipe.frame(performance.now() + 1800);\n     */\n    frame(time) {\n        if (!this.spices.length) {\n            return;\n        }\n        time ??= performance.now();\n        let elapsed = this.elapse(time);\n        // Don't render if the elapsed time has not changed\n        if (this.elapsed === elapsed) {\n            return;\n        }\n        this.elapsed = elapsed;\n        for (let i = 0; i < this.spices.length; i++) {\n            this.spices[i].frame(time);\n        }\n        if (elapsed === 1) {\n            this.onEnd(this);\n        }\n    }\n    /**\n     * Disposes the spices in the recipe and removes its callback functions, making the instance eligible\n     * for the garbage collector.\n     * @since 1.0.0\n     */\n    dispose() {\n        for (let i = this.spices.length - 1; i !== -1; i--) {\n            this.spices[i].dispose();\n        }\n        this.spices.length = 0;\n        this.onEnd = null;\n    }\n}\n", "import { Seed } from './seed.js';\n\nconst defaults = {\n    duration: 0,\n    delay: 0,\n    from: {},\n    to: {},\n    easing: (t) => t, // Linear.None\n    render: () => { },\n    onEnd: () => { }\n};\n\n/**\n * A Spice is an animatable object which properties can be interpolated from its starting\n * value(s) to its end value(s), using an easing function.\n * @example\nimport { Spice } from 'paprika-tween';\nimport { Cubic } from 'paprika-tween/easing';\nconst spice = new Spice({\n    duration: 45,\n    delay: 2,\n    easing: Cubic.InOut,\n    from: { size: 10 },\n    to: { size: 520 },\n    render: ({ size }) => {\n       console.log(size);\n    },\n    onEnd: ({ size }) => console.log(props)\n});\nspice.start(0);\nspice.frame(15);\n * @since 1.0.0\n */\nexport class Spice extends Seed {\n    /**\n     * Creates a new Spice instance with the given options.\n     * @param {Object} options\n     * @param {number} options.duration - The duration of the interpolation. The time scale should be the same as the\n     * starting time and the [frame()]{@linkcode Spice#frame} time.\n     * @param {number} [options.delay] - The delay time to start the interpolation.\n     * @param {Object} options.from - An object with key/value pairs of numeric properties to interpolate from.\n     * @param {Object} options.to - An object with the numeric properties to interpolate to.\n     * @param {function} [options.easing] - The easing function with which calculate the value of the property at a given time.\n     * You can use your custom function or a function available at [paprika-tween/easing]{@link module:paprika-tween/easing}.\n     * Default is <code>Linear.None</code> (no easing).\n     * @param {function} options.render - A callback function that will be called after each [render]{@linkcode Spice#frame}.\n     * It receives three arguments: the first being an object with the properties interpolated for the given time,\n     * the second the amount of interpolation applied from <code>0</code> to <code>1</code>,\n     * and the third the instance of the current Spice.\n     * @param {function} [options.onEnd] - Function called when the interpolation reaches the end. It receive an argument as\n     * an object with the properties interpolated to its end values.\n     * @since 1.0.0\n     */\n    constructor(options) {\n        super();\n        Object.assign(this, defaults, options);\n    }\n    /**\n     * Sets the starting time of the interpolation at the given <code>time</code> argument.<br>\n     * If <code>time</code> is not provided, the timestamp from\n     * [performance.now()]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance/now}\n     * will be used instead.\n     * @param {(DOMHighResTimeStamp|number)} [time] - The initial number from where to start the animation.\n     * @since 1.0.0\n    * @example\nimport { Spice } from 'paprika-tween';\nconst spice = new Spice({ ... });\nspice.start(5);\n     */\n    start(time) {\n        this._startTime = time ?? performance.now();\n        this._startTime += this.delay;\n        this._interpolated = Object.assign(Object.create(null), this.to);\n    }\n    /**\n     * Moves the interpolation of the properties of the spice by the given time, which is\n     * relative to the starting time.<br>\n     * If <code>time</code> is not provided, the timestamp from\n     * [performance.now()]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance/now}\n     * will be used instead.\n     * @param {(DOMHighResTimeStamp|number)} [time] - The amount of time to interpolate since the animations started.\n     * @since 1.0.0\n    * @example\nimport { Spice } from 'paprika-tween';\nconst spice = new Spice({\n    duration: 10,\n    from: { width: 100 },\n    to: { width: 550 },\n    render: (props) => { ... }\n});\nspice.start(0);\nspice.frame(2);\n     */\n    frame(time) {\n        time ??= performance.now();\n        let elapsed = this.elapse(time);\n        // Don't render if the elapsed time has not changed\n        if (this.elapsed === elapsed) {\n            return;\n        }\n        this.elapsed = elapsed;\n        const value = this.easing(elapsed);\n        let start,\n            end,\n            key;\n        for (key in this._interpolated) {\n            start = this.from[key] ?? 0;\n            end = this.to[key];\n            this._interpolated[key] = start + (end - start) * value;\n        }\n        this.render(this._interpolated, value, this);\n        if (elapsed === 1) {\n            this.onEnd(this._interpolated, this);\n        }\n    }\n    /**\n     * Removes the interpolatable properties of the instance and its callback functions, making the instance eligible\n     * for the garbage collector.\n     * @since 1.0.0\n     */\n    dispose() {\n        this.from = null;\n        this.to = null;\n        this.render = null;\n        this.onEnd = null;\n    }\n    /**\n     * Modifies the properties of the spice with the given object.\n     * @param {Object} options - See [Spice constructor]{@linkcode Spice} for the available properties of the <code>options</code> object.\n     * @returns {Spice}\n     * @since 1.0.0\n     */\n    update(options) {\n        Object.assign(this, options);\n        return this;\n    }\n}\n", "/**\n * The Mortar class will call the callback function at the given [frame rate]{@link https://en.wikipedia.org/wiki/Frame_rate}\n * defined by the <code>fps</code> argument (frames per second or times per second).\n * <br>\n * Mortar can be used to perform an animation through a {@link Mixer}, {@link Spice} or {@link Recipe} by calling its\n * <code>frame()</code> method as the callback function. The interpolations will be updated before the next repaint.\n * <br><br>\n * It tries to honors the given <code>fps</code> value, so consecutive calls to the callback function will run at the same\n * speed regardless on the performance of the device or the refresh rate of the screen. However, to ensure a consistent animation,\n * be sure to use the <code>delta</code> argument passed to the callback function to calculate how much the animation\n * will progress in a frame.\n * @example\nimport { Mixer, Spice, Mortar } from 'paprika-tween';\nconst spice = new Spice({\n    duration: 5000,\n    from: { scale: 1 },\n    to: { scale: 2.5 },\n    render: (props, interpolation) => { ... }\n});\nconst mixer = new Mixer();\nmixer.add(spice)\n     .start();\nconst mortar = new Mortar((time) => mixer.frame(time));\nmortar.start();\n * @since 1.0.0\n */\nexport class Mortar {\n    /**\n     * Creates a new instance of the Mortar object.\n     * @param {function} [cb] - The function to be called at the given frame rate. It receives two arguments: the time since it started,\n     * and the elapsed time since the previous frame (or delta time).\n     * @param {Number} [fps=60] - The integer number of times to call the callback function per second (frames per second).\n     * Number must be an integer.\n     * @since 1.0.0\n     */\n    constructor(cb, fps = 60) {\n        this._cb = cb;\n        this._fpsInterval = 1000 / fps;\n        this._running = false;\n    }\n    /**\n     * Starts the frame-by-frame loop by internally calling to [requestAnimationFrame()]{@link https://developer.mozilla.org/en/docs/Web/API/Window/requestAnimationFrame}.\n     * The callback function will be called the <code>fps</code> number of times per second.\n     * @since 1.0.0\n     */\n    start() {\n        this._startTime = performance.now();\n        this._previousTime = this._startTime;\n        this._previousDeltaTime = this._startTime;\n        this._pausedTime = 0;\n        this._running = true;\n        // Wrapper to keep the scope (faster than .bind()?)\n        this._onFrame = (currentTime) => this.frame(currentTime);\n        this.frame(this._startTime);\n    }\n    /**\n     * Pauses the frame-by-frame loop.\n     * @since 1.0.0\n     */\n    pause() {\n        this._running = false;\n        this._previousPauseTime = performance.now();\n    }\n    /**\n     * Resumes the frame-by-frame loop.\n     * @since 1.0.0\n     */\n    resume() {\n        const now = performance.now();\n        this._pausedTime += now - this._previousPauseTime;\n        this._running = true;\n        this.frame(now);\n    }\n    /**\n     * Stops the frame-by-frame loop and removes the callback function. Further calls to {@linkcode Mortar#start} will fail.\n     * @since 1.0.0\n     */\n    stop() {\n        this.pause();\n        this._cb = null;\n        this._onFrame = null;\n    }\n    /**\n     * The <code>frame()</code> method is called before the browser performs the next repaint, then it calls the callback function.\n     * Mortar will ensure that the callback function is called no more than <code>fps</code> number of times per second.\n     * <br>\n     * To keep the same speed in your animation, Be sure to use the <code>delta</code> argument to calculate how much the\n     * animation will progress in a frame.\n     * @since 1.0.0\n     * @example\nimport { Mortar } from 'paprika-tween';\nfunction loop(time, delta) {\n    character.left += character.speed * delta;\n}\nconst mortar = new Mortar(loop, 10);\nmortar.start();\n     */\n    frame(currentTime) {\n        if (!this._running) {\n            return;\n        }\n        currentTime -= this._pausedTime;\n        // Calculate elapsed time since last loop\n        let delta = currentTime - this._previousDeltaTime;\n        // If enough time has elapsed, draw the next frame\n        if (delta >= this._fpsInterval) {\n            // Adjust next execution time in case this frame took longer to execute\n            this._previousDeltaTime = currentTime - (delta % this._fpsInterval);\n            this._cb(currentTime, currentTime - this._previousTime);\n            this._previousTime = currentTime;\n        }\n        if (this._onFrame) {\n            requestAnimationFrame(this._onFrame);\n        }\n    }\n    /**\n     * Returns whether the instance is running or not.\n     * @type {Boolean}\n     */\n    get running() {\n        return this._running;\n    }\n    /**\n     * Returns the time since the Mortar started.\n     * @type {DOMHighResTimeStamp}\n     */\n    get time() {\n        return this._previousTime;\n    }\n}\n", "import { Spice, Mortar } from './index.js';\n\n/**\n * A Sweetie is a {@link Spice} which can be animated by itself. It is created when calling the method [sweet()]{@linkcode module:paprika-tween/sweet}.\n * @example\nimport { sweet } from 'paprika-tween';\nconst { sweetie, spice } = await sweet({\n    duration: 2000,\n    from: { width: 100 },\n    to:   { width: 200 }\n    render: (props, interpolation) => { ... }\n});\nspice.pause();\nspice.resume();\nawait sweetie({\n    to:   { width: 0 }\n});\nspice.dispose();\n * @since 1.0.0\n */\nclass Sweetie extends Spice {\n    constructor(options) {\n        super(options);\n        this._mortar = new Mortar((time) => this.frame(time));\n    }\n\n    start() {\n        this._mortar.start();\n        super.start(this._mortar.time);\n    }\n    /**\n     * Pauses the animation.\n     * @since 1.0.0\n     */\n    pause() {\n        this._mortar.pause();\n    }\n    /**\n     * Resumes the animation.\n     * @since 1.0.0\n     */\n    resume() {\n        this._mortar.resume();\n    }\n    /**\n     * Stops the animation, removes its interpolatable properties and its callback functions.\n     * @since 1.0.0\n     */\n    dispose() {\n        super.dispose();\n        this._mortar.stop();\n        this._mortar = null;\n    }\n\n    async run(options) {\n        return new Promise((resolve) => {\n            this.onEnd = function () {\n                this.pause();\n                resolve({\n                    sweetie: this.run.bind(this),\n                    spice: this\n                });\n            };\n            if (options) {\n                this.from = this.to;\n                this.update(options);\n            }\n            this.start();\n        });\n    }\n    /**\n     * Returns whether the instance is running or not.\n     * @type {Boolean}\n     */\n    get running() {\n        return this._mortar.running;\n    }\n    /**\n     * @method frame\n     * @private\n     */\n}\n/**\n * The function <code>sweet()</code> creates a tween animation that will run for the given duration, interpolating the\n * given properties from start to end by using an easing function.<br>\n * <code>sweet()</code> returns a [thenable object]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables}\n * which can be chained with the method [then()]{@linkcode https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then}\n * or awaited with the keyword [await]{@linkcode https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await}\n * to create animations.\n * @param {Object} options\n * @param {number} options.duration - The duration of the interpolation. The time scale should be the same as the\n * starting time and the [frame()]{@linkcode Spice#frame} time.\n * @param {number} [options.delay] - The delay time to start the interpolation.\n * @param {Object} options.from - An object with key/value pairs of numeric properties to interpolate from.\n * @param {Object} options.to - An object with the numeric properties to interpolate to.\n * @param {function} [options.easing] - The easing function with which calculate the value of the property at a given time.\n * You can use your custom function or a function available at [paprika-tween/easing]{@link module:paprika-tween/easing}.\n * Default is <code>Linear.None</code>.\n * @param {function} options.render - A callback function that will be called after each [render]{@linkcode Spice#frame}.\n * It receives two arguments: the first being the amount of interpolation applied from <code>0</code> to <code>1</code>,\n * and the second an object with the properties interpolated for the given time.\n * @param {function} [options.onEnd] - Function called when the interpolation reaches the end. It receive an argument as\n * an object with the properties interpolated to its end values.\n * @returns {Promise} - A Promise that is resolved with two arguments: a <code>sweetie()</code> function to continue with\n * animation, and the {@link Sweetie} instance which properties are interpolated.\n * @module paprika-tween/sweet\n * @function\n * @example\nimport { sweet } from 'paprika-tween';\nconst { sweetie, spice } = await sweet({\n    duration: 500,\n    from: { size: 0 },\n    to:   { size: 10 }\n    render: ({ size }) => {\n        obj.style.borderWidth = `${size}px`;\n    }\n});\nawait sweetie({\n    duration: 1000,\n    to:   { size: 20 }\n});\nawait sweetie({\n    to: { size: 1 }\n});\nawait sweetie({\n    delay: 50,\n    to: { size: 100 }\n});\n * @since 1.0.0\n */\nexport function sweet(options) {\n    return new Sweetie(options).run();\n}\n"],
  "mappings": "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",
  "names": ["defaults"]
}
